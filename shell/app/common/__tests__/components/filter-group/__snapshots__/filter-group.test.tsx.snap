// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`filter-group ToolBarWithFilter should work well 1`] = `
<ForwardRef
  filterValue={
    Object {
      "name": "erda",
    }
  }
  list={
    Array [
      Object {
        "className": "name-comp",
        "label": "name",
        "name": "name",
        "placeholder": "please enter name",
        "type": "input",
      },
    ]
  }
  onSearch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "_Q_": undefined,
            "name": "erda",
            "undefined": undefined,
          },
        ],
        Array [
          Object {
            "_Q_": "name[erda]",
            "name": "erda",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
>
  <div
    className="toolbar-with-filter with-data"
  >
    <div
      className="tools-container "
    >
      <Component
        btnClassName="filter-btn"
        key=".0"
        onClick={[Function]}
      >
        <Tooltip
          arrowPointAtCenter={false}
          autoAdjustOverflow={true}
          mouseEnterDelay={0.1}
          mouseLeaveDelay={0.1}
          placement="top"
          title="advanced filter"
          type="shallow"
        >
          <ForwardRef(Tooltip)
            arrowContent={
              <span
                className="ant-tooltip-arrow-content"
              />
            }
            arrowPointAtCenter={false}
            autoAdjustOverflow={true}
            builtinPlacements={
              Object {
                "bottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tc",
                    "bc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomLeft": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "bottomRight": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "left": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "cr",
                    "cl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "leftBottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "bl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "leftTop": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    -4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tr",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "right": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "cl",
                    "cr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "rightBottom": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "br",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "rightTop": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    4,
                    0,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "tl",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "top": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bc",
                    "tc",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topLeft": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "bl",
                    "tl",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
                "topRight": Object {
                  "ignoreShake": true,
                  "offset": Array [
                    0,
                    -4,
                  ],
                  "overflow": Object {
                    "adjustX": 1,
                    "adjustY": 1,
                  },
                  "points": Array [
                    "br",
                    "tr",
                  ],
                  "targetOffset": Array [
                    0,
                    0,
                  ],
                },
              }
            }
            motion={
              Object {
                "motionDeadline": 1000,
                "motionName": "ant-zoom-big-fast",
              }
            }
            mouseEnterDelay={0.1}
            mouseLeaveDelay={0.1}
            onPopupAlign={[Function]}
            onVisibleChange={[Function]}
            overlay="advanced filter"
            overlayClassName=""
            placement="top"
            prefixCls="ant-tooltip"
            title="advanced filter"
            type="shallow"
            visible={false}
          >
            <Trigger
              action={
                Array [
                  "hover",
                ]
              }
              afterPopupVisibleChange={[Function]}
              arrowContent={
                <span
                  className="ant-tooltip-arrow-content"
                />
              }
              arrowPointAtCenter={false}
              autoAdjustOverflow={true}
              autoDestroy={false}
              blurDelay={0.15}
              builtinPlacements={
                Object {
                  "bottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tc",
                      "bc",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "bottomLeft": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tl",
                      "bl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "bottomRight": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tr",
                      "br",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "left": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "cr",
                      "cl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "leftBottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "br",
                      "bl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "leftTop": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      -4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tr",
                      "tl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "right": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "cl",
                      "cr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "rightBottom": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bl",
                      "br",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "rightTop": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      4,
                      0,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "tl",
                      "tr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "top": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bc",
                      "tc",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "topLeft": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "bl",
                      "tl",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                  "topRight": Object {
                    "ignoreShake": true,
                    "offset": Array [
                      0,
                      -4,
                    ],
                    "overflow": Object {
                      "adjustX": 1,
                      "adjustY": 1,
                    },
                    "points": Array [
                      "br",
                      "tr",
                    ],
                    "targetOffset": Array [
                      0,
                      0,
                    ],
                  },
                }
              }
              defaultPopupVisible={false}
              destroyPopupOnHide={false}
              focusDelay={0}
              getDocument={[Function]}
              getPopupClassNameFromAlign={[Function]}
              hideAction={Array []}
              mask={false}
              maskClosable={true}
              mouseEnterDelay={0.1}
              mouseLeaveDelay={0.1}
              onPopupAlign={[Function]}
              onPopupVisibleChange={[Function]}
              overlay="advanced filter"
              popup={[Function]}
              popupAlign={Object {}}
              popupClassName=""
              popupMotion={
                Object {
                  "motionDeadline": 1000,
                  "motionName": "ant-zoom-big-fast",
                }
              }
              popupPlacement="top"
              popupStyle={Object {}}
              popupVisible={false}
              prefixCls="ant-tooltip"
              showAction={Array []}
              title="advanced filter"
              type="shallow"
              visible={false}
            >
              <Button
                className="filter-btn"
                key="trigger"
                onClick={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
              >
                <Wave>
                  <button
                    className="ant-btn filter-btn"
                    onClick={[Function]}
                    onMouseEnter={[Function]}
                    onMouseLeave={[Function]}
                    type="button"
                  >
                    <LoadingIcon
                      existIcon={false}
                      loading={false}
                      prefixCls="ant-btn"
                    >
                      <CSSMotion
                        motionName="ant-btn-loading-icon-motion"
                        onAppearActive={[Function]}
                        onAppearStart={[Function]}
                        onEnterActive={[Function]}
                        onEnterStart={[Function]}
                        onLeaveActive={[Function]}
                        onLeaveStart={[Function]}
                        removeOnLeave={true}
                        visible={false}
                      >
                        <DomWrapper />
                      </CSSMotion>
                    </LoadingIcon>
                    <Icon
                      key=".0"
                      type="filter"
                    >
                      <i
                        aria-label="icon: filter"
                        className="iconfont icon-filter"
                      />
                    </Icon>
                  </button>
                </Wave>
              </Button>
            </Trigger>
          </ForwardRef(Tooltip)>
        </Tooltip>
      </Component>
    </div>
    <div
      className="filter-bar"
    >
      <WrappedTag
        className="mb-1"
        closable={true}
        key="name"
        onClose={[Function]}
      >
        <Tag
          className="mb-1"
          closable={true}
          onClose={[Function]}
        >
          <span
            className="ant-tag mb-1"
            style={
              Object {
                "backgroundColor": undefined,
              }
            }
          >
            name
            : 
            erda
            <ForwardRef(CloseOutlined)
              className="ant-tag-close-icon"
              onClick={[Function]}
            >
              <AntdIcon
                className="ant-tag-close-icon"
                icon={
                  Object {
                    "icon": Object {
                      "attrs": Object {
                        "focusable": "false",
                        "viewBox": "64 64 896 896",
                      },
                      "children": Array [
                        Object {
                          "attrs": Object {
                            "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z",
                          },
                          "tag": "path",
                        },
                      ],
                      "tag": "svg",
                    },
                    "name": "close",
                    "theme": "outlined",
                  }
                }
                onClick={[Function]}
              >
                <span
                  aria-label="close"
                  className="anticon anticon-close ant-tag-close-icon"
                  onClick={[Function]}
                  role="img"
                  tabIndex={-1}
                >
                  <IconReact
                    icon={
                      Object {
                        "icon": Object {
                          "attrs": Object {
                            "focusable": "false",
                            "viewBox": "64 64 896 896",
                          },
                          "children": Array [
                            Object {
                              "attrs": Object {
                                "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z",
                              },
                              "tag": "path",
                            },
                          ],
                          "tag": "svg",
                        },
                        "name": "close",
                        "theme": "outlined",
                      }
                    }
                  >
                    <svg
                      aria-hidden="true"
                      data-icon="close"
                      fill="currentColor"
                      focusable="false"
                      height="1em"
                      key="svg-close"
                      viewBox="64 64 896 896"
                      width="1em"
                    >
                      <path
                        d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                        key="svg-close-svg-0"
                      />
                    </svg>
                  </IconReact>
                </span>
              </AntdIcon>
            </ForwardRef(CloseOutlined)>
          </span>
        </Tag>
      </WrappedTag>
      <div
        className="clear"
        key="_clear"
        onClick={[Function]}
      >
        clear
      </div>
    </div>
    <FilterGroupDrawer
      list={
        Array [
          Object {
            "className": "name-comp",
            "label": "name",
            "name": "name",
            "placeholder": "please enter name",
            "type": "input",
          },
        ]
      }
      onClose={[Function]}
      onSearch={[Function]}
      visible={false}
    >
      <DrawerWrapper
        className="dice-drawer advanced-filter-drawer"
        destroyOnClose={true}
        onClose={[Function]}
        title="advanced filter"
        visible={false}
        width="520"
      >
        <Drawer
          className="dice-drawer advanced-filter-drawer"
          destroyOnClose={true}
          onClose={[Function]}
          prefixCls="ant-drawer"
          title="advanced filter"
          visible={false}
          width="520"
        >
          <DrawerWrapper
            afterVisibleChange={[Function]}
            className="dice-drawer advanced-filter-drawer"
            defaultOpen={false}
            duration=".3s"
            ease="cubic-bezier(0.78, 0.14, 0.15, 0.86)"
            forceRender={false}
            getContainer="body"
            handler={false}
            keyboard={true}
            level={null}
            maskClosable={true}
            maskStyle={Object {}}
            onChange={[Function]}
            onClose={[Function]}
            open={false}
            placement="right"
            prefixCls="ant-drawer"
            showMask={true}
            style={
              Object {
                "transform": undefined,
                "zIndex": undefined,
              }
            }
            width="520"
            wrapperClassName=""
          >
            <PortalWrapper
              forceRender={false}
              getContainer="body"
              visible={false}
              wrapperClassName=""
            >
              <ForwardRef
                getContainer={[Function]}
              >
                <Portal
                  containerInfo={
                    <div>
                      <div
                        class="ant-drawer ant-drawer-right dice-drawer advanced-filter-drawer"
                        tabindex="-1"
                      >
                        <div
                          class="ant-drawer-mask"
                        />
                        <div
                          class="ant-drawer-content-wrapper"
                          style="width: 520px; transform: translateX(100%);"
                        >
                          <div
                            class="ant-drawer-content"
                          >
                            <div
                              class="ant-drawer-wrapper-body"
                              style="opacity: 0; transition: opacity .3s;"
                            >
                              <div
                                class="ant-drawer-header"
                              >
                                <div
                                  class="ant-drawer-title"
                                >
                                  advanced filter
                                </div>
                                <button
                                  aria-label="Close"
                                  class="ant-drawer-close"
                                  type="button"
                                >
                                  <span
                                    aria-label="close"
                                    class="anticon anticon-close"
                                    role="img"
                                  >
                                    <svg
                                      aria-hidden="true"
                                      data-icon="close"
                                      fill="currentColor"
                                      focusable="false"
                                      height="1em"
                                      viewBox="64 64 896 896"
                                      width="1em"
                                    >
                                      <path
                                        d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                                      />
                                    </svg>
                                  </span>
                                </button>
                              </div>
                              <div
                                class="ant-drawer-body"
                              >
                                <div
                                  class="filter-group-drawer"
                                >
                                  <div>
                                    <div
                                      class="filter-label"
                                    >
                                      name
                                    </div>
                                    <input
                                      class="ant-input name-comp"
                                      label="name"
                                      name="name"
                                      placeholder="please enter name"
                                      type="text"
                                      value=""
                                    />
                                  </div>
                                  <div
                                    class="drawer-footer ml-3-group"
                                  >
                                    <button
                                      class="ant-btn"
                                      type="button"
                                    >
                                      <span>
                                        cancel
                                      </span>
                                    </button>
                                    <button
                                      class="ant-btn ant-btn-primary ant-btn-background-ghost"
                                      type="button"
                                    >
                                      <span>
                                        filter
                                      </span>
                                    </button>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  }
                >
                  <DrawerChild
                    afterVisibleChange={[Function]}
                    className="dice-drawer advanced-filter-drawer"
                    duration=".3s"
                    ease="cubic-bezier(0.78, 0.14, 0.15, 0.86)"
                    getContainer={[Function]}
                    getOpenCount={[Function]}
                    handler={false}
                    keyboard={true}
                    level={null}
                    maskClosable={true}
                    maskStyle={Object {}}
                    onChange={[Function]}
                    onClose={[Function]}
                    onHandleClick={[Function]}
                    open={false}
                    placement="right"
                    prefixCls="ant-drawer"
                    scrollLocker={
                      ScrollLocker {
                        "getContainer": [Function],
                        "lock": [Function],
                        "lockTarget": 0,
                        "options": Object {
                          "container": <body
                            class=""
                            style=""
                          >
                            <script />
                            <div>
                              <div
                                class="ant-drawer ant-drawer-right dice-drawer advanced-filter-drawer"
                                tabindex="-1"
                              >
                                <div
                                  class="ant-drawer-mask"
                                />
                                <div
                                  class="ant-drawer-content-wrapper"
                                  style="width: 520px; transform: translateX(100%);"
                                >
                                  <div
                                    class="ant-drawer-content"
                                  >
                                    <div
                                      class="ant-drawer-wrapper-body"
                                      style="opacity: 0; transition: opacity .3s;"
                                    >
                                      <div
                                        class="ant-drawer-header"
                                      >
                                        <div
                                          class="ant-drawer-title"
                                        >
                                          advanced filter
                                        </div>
                                        <button
                                          aria-label="Close"
                                          class="ant-drawer-close"
                                          type="button"
                                        >
                                          <span
                                            aria-label="close"
                                            class="anticon anticon-close"
                                            role="img"
                                          >
                                            <svg
                                              aria-hidden="true"
                                              data-icon="close"
                                              fill="currentColor"
                                              focusable="false"
                                              height="1em"
                                              viewBox="64 64 896 896"
                                              width="1em"
                                            >
                                              <path
                                                d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                                              />
                                            </svg>
                                          </span>
                                        </button>
                                      </div>
                                      <div
                                        class="ant-drawer-body"
                                      >
                                        <div
                                          class="filter-group-drawer"
                                        >
                                          <div>
                                            <div
                                              class="filter-label"
                                            >
                                              name
                                            </div>
                                            <input
                                              class="ant-input name-comp"
                                              label="name"
                                              name="name"
                                              placeholder="please enter name"
                                              type="text"
                                              value=""
                                            />
                                          </div>
                                          <div
                                            class="drawer-footer ml-3-group"
                                          >
                                            <button
                                              class="ant-btn"
                                              type="button"
                                            >
                                              <span>
                                                cancel
                                              </span>
                                            </button>
                                            <button
                                              class="ant-btn ant-btn-primary ant-btn-background-ghost"
                                              type="button"
                                            >
                                              <span>
                                                filter
                                              </span>
                                            </button>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </body>,
                        },
                        "reLock": [Function],
                        "unLock": [Function],
                      }
                    }
                    showMask={true}
                    style={
                      Object {
                        "transform": undefined,
                        "zIndex": undefined,
                      }
                    }
                    switchScrollingEffect={[Function]}
                    width="520"
                  >
                    <div
                      className="ant-drawer ant-drawer-right dice-drawer advanced-filter-drawer"
                      onTransitionEnd={[Function]}
                      style={
                        Object {
                          "transform": undefined,
                          "zIndex": undefined,
                        }
                      }
                      tabIndex={-1}
                    >
                      <div
                        className="ant-drawer-mask"
                        onClick={[Function]}
                        style={Object {}}
                      />
                      <div
                        className="ant-drawer-content-wrapper"
                        style={
                          Object {
                            "height": undefined,
                            "msTransform": "translateX(100%)",
                            "transform": "translateX(100%)",
                            "width": "520px",
                          }
                        }
                      >
                        <div
                          className="ant-drawer-content"
                        >
                          <div
                            className="ant-drawer-wrapper-body"
                            onTransitionEnd={[Function]}
                            style={
                              Object {
                                "opacity": 0,
                                "transition": "opacity .3s",
                              }
                            }
                          >
                            <div
                              className="ant-drawer-header"
                            >
                              <div
                                className="ant-drawer-title"
                              >
                                advanced filter
                              </div>
                              <button
                                aria-label="Close"
                                className="ant-drawer-close"
                                onClick={[Function]}
                                style={
                                  Object {
                                    "--scroll-bar": "0px",
                                  }
                                }
                                type="button"
                              >
                                <ForwardRef(CloseOutlined)>
                                  <AntdIcon
                                    icon={
                                      Object {
                                        "icon": Object {
                                          "attrs": Object {
                                            "focusable": "false",
                                            "viewBox": "64 64 896 896",
                                          },
                                          "children": Array [
                                            Object {
                                              "attrs": Object {
                                                "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z",
                                              },
                                              "tag": "path",
                                            },
                                          ],
                                          "tag": "svg",
                                        },
                                        "name": "close",
                                        "theme": "outlined",
                                      }
                                    }
                                  >
                                    <span
                                      aria-label="close"
                                      className="anticon anticon-close"
                                      role="img"
                                    >
                                      <IconReact
                                        icon={
                                          Object {
                                            "icon": Object {
                                              "attrs": Object {
                                                "focusable": "false",
                                                "viewBox": "64 64 896 896",
                                              },
                                              "children": Array [
                                                Object {
                                                  "attrs": Object {
                                                    "d": "M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z",
                                                  },
                                                  "tag": "path",
                                                },
                                              ],
                                              "tag": "svg",
                                            },
                                            "name": "close",
                                            "theme": "outlined",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden="true"
                                          data-icon="close"
                                          fill="currentColor"
                                          focusable="false"
                                          height="1em"
                                          key="svg-close"
                                          viewBox="64 64 896 896"
                                          width="1em"
                                        >
                                          <path
                                            d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 00203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"
                                            key="svg-close-svg-0"
                                          />
                                        </svg>
                                      </IconReact>
                                    </span>
                                  </AntdIcon>
                                </ForwardRef(CloseOutlined)>
                              </button>
                            </div>
                            <div
                              className="ant-drawer-body"
                            >
                              <FilterCore
                                list={
                                  Array [
                                    Object {
                                      "className": "name-comp",
                                      "label": "name",
                                      "name": "name",
                                      "placeholder": "please enter name",
                                      "type": "input",
                                    },
                                  ]
                                }
                                onSearch={[Function]}
                              >
                                <div
                                  className="filter-group-drawer"
                                >
                                  <div>
                                    <div
                                      className="filter-label"
                                    >
                                      name
                                    </div>
                                    <Field
                                      className="name-comp"
                                      key="name"
                                      label="name"
                                      name="name"
                                      placeholder="please enter name"
                                      type="input"
                                      update={[Function]}
                                    >
                                      <Input
                                        className="name-comp"
                                        label="name"
                                        name="name"
                                        onChange={[Function]}
                                        placeholder="please enter name"
                                        type="text"
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          className="name-comp"
                                          element={
                                            <input
                                              className="ant-input name-comp"
                                              label="name"
                                              name="name"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="please enter name"
                                              type="text"
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          inputType="input"
                                          label="name"
                                          name="name"
                                          onChange={[Function]}
                                          placeholder="please enter name"
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <input
                                            className="ant-input name-comp"
                                            label="name"
                                            name="name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            placeholder="please enter name"
                                            type="text"
                                            value=""
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Field>
                                  </div>
                                  <div
                                    className="drawer-footer ml-3-group"
                                  >
                                    <Button
                                      onClick={[Function]}
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            cancel
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                    <Button
                                      ghost={true}
                                      onClick={[Function]}
                                      type="primary"
                                    >
                                      <Wave>
                                        <button
                                          className="ant-btn ant-btn-primary ant-btn-background-ghost"
                                          onClick={[Function]}
                                          type="button"
                                        >
                                          <LoadingIcon
                                            existIcon={false}
                                            loading={false}
                                            prefixCls="ant-btn"
                                          >
                                            <CSSMotion
                                              motionName="ant-btn-loading-icon-motion"
                                              onAppearActive={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveStart={[Function]}
                                              removeOnLeave={true}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </LoadingIcon>
                                          <span
                                            key=".0"
                                          >
                                            filter
                                          </span>
                                        </button>
                                      </Wave>
                                    </Button>
                                  </div>
                                </div>
                              </FilterCore>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </DrawerChild>
                </Portal>
              </ForwardRef>
            </PortalWrapper>
          </DrawerWrapper>
        </Drawer>
      </DrawerWrapper>
    </FilterGroupDrawer>
  </div>
</ForwardRef>
`;
