server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;

    # compression
    gzip on;
    gzip_min_length   2k;
    gzip_buffers      4 16k;
    gzip_http_version 1.0;
    gzip_comp_level   3;
    gzip_types        text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_vary on;

    client_max_body_size 0;

    set $my_scheme "http";
    if ($http_x_forwarded_proto = "https") {
        set $my_scheme "https";
    }

    if ($request_method !~ ^(GET|POST|PUT|DELETE|PATCH|HEAD|OPTIONS)$ ) {
        return 403;
    }

    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Xss-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Cache-Control no-cache;

    #static files
    location ~* ^/static/ {
        expires 30d;
    }
    location /version\.(json)$ {
        expires -1;
        add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
    }

    location /_api/health {
        default_type application/json;
        return 200 '{"name":"erdaUI","status":"ok"}';
    }

    location / {
        index index.html;
        try_files /static/shell/index.html /index.html =404;
    }

    set $taEnabled ${TA_ENABLE};
    set $taUrl //${COLLECTOR_PUBLIC_ADDR}/ta.js;
    set $collectorUrl //${COLLECTOR_PUBLIC_ADDR}/collect;
    set $terminusKey ${TERMINUS_KEY};

    location /ta {
        default_type application/javascript;
       return 200 'window._taConfig={enabled:$taEnabled,ak:"$terminusKey",url:"$taUrl",collectorUrl:"$collectorUrl"}';
    }

    location ~ ^/(workBench|microService|dataCenter|orgCenter|edge|sysAdmin|org-list|noAuth|freshMan|inviteToOrg|perm) {
        return 302 /-$request_uri;
    }

    # 301 redirect url with replace workBench to dop
    location ~ ^/[^/]*/workBench/ {
        # add $my_scheme to prevent redirect https to http
        rewrite ^/([^/]*)/workBench/(.*) $my_scheme://$http_host/$1/dop/$2 redirect; 
    }

    # 301 redirect url with replace microService to msp
    location ~ ^/[^/]*/microService/ {
        rewrite ^/([^/]*)/microService/(.*) $my_scheme://$http_host/$1/msp/$2 redirect; 
    }

    # 301 redirect url with replace dataCenter to cmp
    location ~ ^/[^/]*/dataCenter/ {
        rewrite ^/([^/]*)/dataCenter/(.*) $my_scheme://$http_host/$1/cmp/$2 redirect; 
    }

    # 301 redirect url with replace edge to ecp
    location ~ ^/[^/]*/edge/ {
        rewrite ^/([^/]*)/edge/(.*) $my_scheme://$http_host/$1/ecp/$2 redirect; 
    }

    location /api/dice-env  {
        default_type application/javascript;
        return 200 'window.diceEnv={
            "ENABLE_BIGDATA":${ENABLE_BIGDATA},
            "UC_PUBLIC_URL":"${UC_PUBLIC_URL}"
        }';
    }

    location ^~ /api/files {
        proxy_pass http://${OPENAPI_ADDR};
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $my_scheme;
        proxy_set_header        Host $http_host;
    }

    location ~* ^/api/[^/]*/repo {
        rewrite  /api/([^/]*)/(.*) /api/$2 break;
        proxy_set_header org $1;
        proxy_pass http://${OPENAPI_ADDR};
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $my_scheme;
        proxy_set_header        Host $http_host;
        keepalive_timeout       500;
        proxy_read_timeout      500;
    }

    location ~* ^/api/[^/]*/websocket {
        rewrite  /api/([^/]*)/(.*) /api/$2 break;
        proxy_set_header org $1;
        proxy_pass http://${OPENAPI_ADDR};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    location ~* ^/api/[^/]*/terminal {
        rewrite  /api/([^/]*)/(.*) /api/$2 break;
        proxy_set_header org $1;
        proxy_pass http://${OPENAPI_ADDR};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location ~* ^/api/[^/]*/apim-ws/api-docs/filetree {
        rewrite  /api/([^/]*)/(.*) /api/$2 break;
        proxy_set_header org $1;
        proxy_pass   http://${OPENAPI_ADDR};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    location ~* ^/api/[^/]*/ {
        rewrite  /api/([^/]*)/(.*) /api/$2 break;
        proxy_set_header org $1;
        proxy_pass http://${OPENAPI_ADDR};
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $my_scheme;
        proxy_set_header        Host $http_host;
    }

    location ~* ^/[^/]*/market {
        index market.html;
        try_files /static/market/index.html =404;
    }

    # redirect repo address to gittar when user agent is git
    location ~ ^/[^/]*/dop/ {
        if ($http_user_agent ~* "git"){
            proxy_pass http://${GITTAR_ADDR};
        }
        index index.html;
        try_files /static/shell/index.html /index.html =404;
    }

    location ^~ /wb {
        proxy_pass http://${GITTAR_ADDR};
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $my_scheme;
        proxy_set_header        Host $http_host;
        keepalive_timeout       500;
        proxy_read_timeout      500;
    }

    # dice 平台对外的元信息
    location /metadata.json {
        proxy_pass http://${OPENAPI_ADDR};
        proxy_set_header        X-Real-IP $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header        X-Forwarded-Proto $my_scheme;
        proxy_set_header        Host $http_host;
    }
}